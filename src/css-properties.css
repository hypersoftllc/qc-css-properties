/*! css-properties.css v1.0.0-alpha | ISC License */

/*
## Naming Conventions

In general, the following naming convention is used.

{css-property-name}-{css-property-value}

Sometimes, a shorter name will also be associated with the same declaration block.
*/

.align-content-center {
  align-content: center !important;
}
.align-content-flex-end {
  align-content: flex-end !important;
}
.align-content-flex-start {
  align-content: flex-start !important;
}
.align-content-space-around {
  align-content: space-around !important;
}
.align-content-space-between {
  align-content: space-between !important;
}
.align-content-stretch {
  align-content: stretch !important;
}


.align-items-baseline { 
  align-items: baseline !important;
}
.align-items-center {
  align-items: center !important;
}
.align-items-flex-end {
  align-items: flex-end !important;
}
.align-items-flex-start {
  align-items: flex-start !important;
}
.align-items-stretch {
  align-items: stretch !important;
}


.align-self-auto {
  align-self: auto !important;
}
.align-self-baseline {
  align-self: baseline !important;
}
.align-self-center {
  align-self: center !important;
}
.align-self-flex-end {
  align-self: flex-end !important;
}
.align-self-flex-start {
  align-self: flex-start !important;
}
.align-self-stretch {
  align-self: stretch !important;
}


.background-inherit,
.bg-inherit { background: inherit !important; }

.background-none,
.bg-none { background: none !important; }

.background-transparent,
.bg-transparent { background: transparent !important; }

.background-color-inherit,
.bg-color-inherit { background-color: inherit !important; }

.background-color-transparent,
.bg-color-transparent { background-color: transparent !important; }

.background-image-none,
.bg-image-none { background-image: none !important; }


.borderless,
.border-none {
  border: 0 !important;
}


.box-sizing-border-box,
.border-box { box-sizing: border-box !important; }
.box-sizing-content-box,
.content-box { box-sizing: content-box !important; }


.clear-both,
.clear { clear: both !important; }
.clear-left { clear: left !important; }
.clear-none { clear: none !important; }
.clear-right { clear: right !important; }


/*
The clearfix hack allows the use of floated elements in a container without
needing to add presentational markup such as <br class="clear"> or something
similar to the end of the container markup.

<div class="clearfix">
  <div class="floated"></div>
  <div class="floated"></div>
  <div class="floated"></div>
  <!-- <br style="clear:both"> not needed. -->
</div>

http://blog.teamtreehouse.com/a-better-clearfix-with-sass
http://nicolasgallagher.com/micro-clearfix-hack/
See stubbornella.org and OOCSS for some other documented examples of clearfixes.
*/
.clearfix::before,
.clearfix::after { content: " " !important; display: table !important; }
.clearfix::after { clear: both !important; }


.cursor-alias { cursor: alias !important; }
.cursor-all-scroll { cursor: all-scroll !important; }
.cursor-auto { cursor: auto !important; }
.cursor-cell { cursor: cell !important; }
.cursor-col-resize { cursor: col-resize !important; }
.cursor-context-menu { cursor: context-menu !important; }
.cursor-copy { cursor: copy !important; }
.cursor-crosshair { cursor: crosshair !important; }
.cursor-default { cursor: default !important; }
.cursor-e-resize { cursor: e-resize !important; }
.cursor-ew-resize { cursor: ew-resize !important; }
.cursor-grab { cursor: grab !important; }
.cursor-grabbing { cursor: grabbing !important; }
.cursor-help { cursor: help !important; }
.cursor-move { cursor: move !important; }
.cursor-n-resize { cursor: n-resize !important; }
.cursor-ne-resize { cursor: ne-resize !important; }
.cursor-nesw-resize { cursor: nesw-resize !important; }
.cursor-ns-resize { cursor: ns-resize !important; }
.cursor-nw-resize { cursor: nw-resize !important; }
.cursor-nwse-resize { cursor: nwse-resize !important; }
.cursor-no-drop { cursor: no-drop !important; }
.cursor-none { cursor: none !important; }
.cursor-not-allowed { cursor: not-allowed !important; }
.cursor-pointer { cursor: pointer !important; }
.cursor-progress { cursor: progress !important; }
.cursor-row-resize { cursor: row-resize !important; }
.cursor-s-resize { cursor: s-resize !important; }
.cursor-se-resize { cursor: se-resize !important; }
.cursor-sw-resize { cursor: sw-resize !important; }
.cursor-text { cursor: text !important; }
.cursor-vertical-text { cursor: vertical-text !important; }
.cursor-w-resize { cursor: w-resize !important; }
.cursor-wait { cursor: wait !important; }
.cursor-zoom-in { cursor: zoom-in !important; }
.cursor-zoom-out { cursor: zoom-out !important; }


/* Equivalent to Bootstrap's `show`. */
.display-block,
.block { display: block !important; }

.display-contents {
  display: contents !important;
}

.display-flex {
  display: flex !important;
}

.display-flow {
  display: flow !important;
}

.display-flow-root {
  display: flow-root !important;
}

.display-grid {
  display: grid !important;
}

.display-inline,
.inline { display: inline !important; }
table.display-inline,
table.inline { display: inline-table !important; }

.display-inline-block,
.inline-block { display: inline-block !important; }

.display-inline-flex {
  display: inline-flex !important;
}

/*
Why use `hidden` class with `display` instead of `visibility`.  The `display`
property is typically what is changed when one wants something to be "hidden".
That is, it was chosen because it is the most natural.  Also, it matches the
behavior of the HTML5 `hidden` attribute.  It is fairly rare when one wants to
set `visibility` to `hidden`.  Use the `invisible` class for that.

Equivalent to Bootstrap's `hide`.
*/
.display-none,
.print-only,
.hidden,
[hidden] { display: none !important; }


.flex-direction-column {
  flex-direction: column !important;
}
.flex-direction-column-reverse {
  flex-direction: column-reverse !important;
}
.flex-direction-row {
  flex-direction: row !important;
}
.flex-direction-row-reverse {
  flex-direction: row-reverse !important;
}


.flex-flow-column,
.flex-flow-column-nowrap {
  flex-direction: column !important;
  flex-wrap: nowrap !important;
}
.flex-flow-column-wrap {
  flex-direction: column !important;
  flex-wrap: wrap !important;
}
.flex-flow-column-wrap-reverse {
  flex-direction: column !important;
  flex-wrap: wrap-reverse !important;
}
.flex-flow-column-reverse,
.flex-flow-column-reverse-nowrap {
  flex-direction: column-reverse !important;
  flex-wrap: nowrap !important;
}
.flex-flow-column-reverse-wrap {
  flex-direction: column-reverse !important;
  flex-wrap: wrap !important;
}
.flex-flow-column-reverse-wrap-reverse {
  flex-direction: column-reverse !important;
  flex-wrap: wrap-reverse !important;
}
.flex-flow,
.flex-flow-row,
.flex-flow-row-nowrap {
  flex-direction: row !important;
  flex-wrap: nowrap !important;
}
.flex-flow-row-wrap {
  flex-direction: row !important;
  flex-wrap: wrap !important;
}
.flex-flow-row-wrap-reverse {
  flex-direction: row !important;
  flex-wrap: wrap-reverse !important;
}
.flex-flow-row-reverse,
.flex-flow-row-reverse-nowrap {
  flex-direction: row-reverse !important;
  flex-wrap: nowrap !important;
}
.flex-flow-row-reverse-wrap {
  flex-direction: row-reverse !important;
  flex-wrap: wrap !important;
}
.flex-flow-row-reverse-wrap-reverse {
  flex-direction: row-reverse !important;
  flex-wrap: wrap-reverse !important;
}


.flex-wrap-nowrap {
  flex-wrap: nowrap !important;
}
.flex-wrap-wrap {
  flex-wrap: wrap !important;
}
.flex-wrap-wrap-reverse {
  flex-wrap: wrap-reverse !important;
}


/* Equivalent to Bootstrap's `pull-left`. */
.float-left { float: left !important; }
/* Equivalent to Bootstrap's `pull-right`. */
.float-right { float: right !important; }
.float-none { float: none !important; }


.font-style-italic,
.italic { font-style: italic !important; }
.font-style-normal,
.normal { font-style: normal !important; }
.font-style-oblique,
.oblique { font-style: oblique !important; }


.font-variant-normal { font-variant: normal !important; }
.font-variant-small-caps { font-variant: small-caps !important; }


.font-weight-normal { font-weight: normal !important; }
.font-weight-bold,
.bold { font-weight: bold !important; }
.font-weight-bolder,
.bolder { font-weight: bolder !important; }
.font-weight-lighter,
.lighter { font-weight: lighter !important; }


.height-auto { height: auto !important; }
.height-full { height: 100% !important; }


.justify-content-center {
  justify-content: center !important;
}
.justify-content-flex-end {
  justify-content: flex-end !important;
}
.justify-content-flex-start {
  justify-content: flex-start !important;
}
.justify-content-space-around {
  justify-content: space-around !important;
}
.justify-content-space-between {
  justify-content: space-between !important;
}


.letter-spacing-normal { letter-spacing: normal !important; }


.margin-none { margin: 0 !important; }


.opacity-100,
.opaque { opacity: 1 !important; }
.opacity-90 { opacity: .9 !important; }
.opacity-80 { opacity: .8 !important; }
.opacity-70 { opacity: .7 !important; }
.opacity-60 { opacity: .6 !important; }
.opacity-50 { opacity: .5 !important; }
.opacity-40 { opacity: .4 !important; }
.opacity-30 { opacity: .3 !important; }
.opacity-20 { opacity: .2 !important; }
.opacity-10 { opacity: .1 !important; }
.opacity-0 { opacity: 0 !important; }


.outline-none { outline: none !important; }


.overflow-auto { overflow: auto !important; }
.overflow-hidden { overflow: hidden !important; }
.overflow-scroll { overflow: scroll !important; }
.overflow-visible { overflow: visible !important; }

.overflow-x-auto { overflow-x: auto !important; }
.overflow-x-hidden { overflow-x: hidden !important; }
.overflow-x-scroll { overflow-x: scroll !important; }
.overflow-x-visible { overflow-x: visible !important; }

.overflow-y-auto { overflow-y: auto !important; }
.overflow-y-hidden { overflow-y: hidden !important; }
.overflow-y-scroll { overflow-y: scroll !important; }
.overflow-y-visible { overflow-y: visible !important; }


.padless,
.padding-none { padding: 0 !important; }


.position-absolute { position: absolute !important; }
/*
Use the following instead of Bootstrap's `affix`.  Theirs is not declared
important.
*/
.position-fixed,
.fixed { position: fixed !important; }
.position-relative { position: relative !important; }
.position-static { position: static !important; }


/*
TODO: Document which browsers support this.
*/
.resize-block { resize: block !important; }
.resize-both,
.resize { resize: both !important; }
.resize-inline { resize: inline !important; }
.resize-none { resize: none !important; }
.resize-horizontal,
.resize-h { resize: horizontal !important; }
.resize-vertical,
.resize-v { resize: vertical !important; }


.table-layout-auto { table-layout: auto !important; }
.table-layout-fixed { table-layout: fixed !important; }


.text-align-center,
.center { text-align: center !important; }
.text-align-justify,
.justify { text-align: justify !important; }
.text-align-left,
.left { text-align: left !important; }
.text-align-right,
.right { text-align: right !important; }


.text-overflow-clip { text-overflow: clip !important; }
.text-overflow-ellipsis,
.ellipsis { text-overflow: ellipsis !important; }


.text-decoration-line-through,
.strike,
.lined-through { text-decoration: line-through !important; }
.text-decoration-none { text-decoration: none !important; }
.text-decoration-overline,
.overlined { text-decoration: overline !important; }
.text-decoration-underline,
.underlined { text-decoration: underline !important; }
.text-decoration-overline-underline,
.overlined-underlined { text-decoration: overline underline !important; }


/*
Use the following instead of Bootstrap's `text-capitalize`.  Theirs is not
declared important.
*/
.text-transform-capitalize,
.capitalized { text-transform: capitalize !important; }
/*
Use the following instead of Bootstrap's `text-lowercase`.  Theirs is not
declared important.
*/
.text-transform-lowercase,
.lowercased { text-transform: lowercase !important; }
.text-transform-none { text-transform: none !important; }
/*
Use the following instead of Bootstrap's `text-uppercase`.  Theirs is not
declared important.
*/
.text-transform-uppercase,
.uppercased { text-transform: uppercase !important; }


.rotate-0 {
  transform: rotate(0deg) !important;
}
.rotate-45 {
  transform: rotate(45deg) !important;
}
.rotate-90 {
  transform: rotate(90deg) !important;
}
.rotate-135 {
  transform: rotate(135deg) !important;
}
.rotate-180 {
  transform: rotate(180deg) !important;
}
.rotate-225 {
  transform: rotate(225deg) !important;
}
.rotate-270 {
  transform: rotate(270deg) !important;
}
.rotate-315 {
  transform: rotate(315deg) !important;
}


.vertical-align-baseline,
.valign-baseline { vertical-align: baseline !important; }
.vertical-align-bottom,
.valign-bottom { vertical-align: bottom !important; }
.vertical-align-middle,
.valign-middle { vertical-align: middle !important; }
.vertical-align-sub,
.valign-sub { vertical-align: sub !important; }
.vertical-align-super,
.valign-super { vertical-align: super !important; }
.vertical-align-text-bottom,
.valign-text-bottom { vertical-align: text-bottom !important; }
.vertical-align-text-top,
.valign-text-top { vertical-align: text-top !important; }
.vertical-align-top,
.valign-top { vertical-align: top !important; }


/*
Use the following instead of Bootstrap's `invisible`.  Theirs is not declared
important.
*/
.visibility-hidden,
.invisible { visibility: hidden !important; }
.visibility-collapse,
.collapsed { visibility: collapse !important; }
.visibility-visible,
.visible { visibility: visible !important; }


.user-select-none {
  user-select: none !important; cursor: default !important;
}
.user-select-text {
  user-select: text !important;
}


.white-space-normal { white-space: normal !important; }
.white-space-nowrap,
.nowrap { white-space: nowrap !important; }
.white-space-pre,
.pre { white-space: pre !important; }
.white-space-pre-line,
.pre-line { white-space: pre-line !important; }
.white-space-pre-wrap,
.pre-wrap { white-space: pre-wrap !important; }


.width-auto { width: auto !important; }
.width-full { width: 100% !important; }
.width-half { width: 50% !important; }
.width-quarter { width: 25% !important; }


.word-break-break-all { word-break: break-all !important; }
.word-break-normal { word-break: normal !important; }
.word-break-keep-all { word-break: keep-all !important; }


.word-spacing-normal { word-spacing: normal !important; }


.word-wrap-normal { word-wrap: normal !important; }
.word-wrap-break-word { word-wrap: break-word !important; }


/*
* An imperceptible element is one that can't be perceived.  It is not only
* invisible but also takes up no space.  If it took up any space, then it could
* potentially be perceived by the fact that surrounding elements would be in a
* different position than they would be otherwise.
*
* We don't ever what to add `visibility: hidden` to the imperceptible class.
* Yes, it would make it invisible.  However, when visibility: hidden is used on a
* submit button, some browsers treat the submit button as if it were non-existent.
* Similarly with `display: none`.
* 
* The original use case: "Wanted a form to be submitted when the user pressed
* Enter but didn't want the submit button to be displayed."
*/
.imperceptible {
  display: block !important;
  width: 0 !important;
  height: 0 !important;
  margin: 0 !important;
  padding: 0 !important;
  border: 0 !important;
}

@media print {

  .page-break-after-always { page-break-after: always !important; }
  .page-break-after-auto { page-break-after: auto !important; }
  .page-break-after-avoid { page-break-after: avoid !important; }
  .page-break-after-left { page-break-after: left !important; }
  .page-break-after-right { page-break-after: right !important; }


  .page-break-before-always { page-break-before: always !important; }
  .page-break-before-auto { page-break-before: auto !important; }
  .page-break-before-avoid { page-break-before: avoid !important; }
  .page-break-before-left { page-break-before: left !important; }
  .page-break-before-right { page-break-before: right !important; }


  .page-break-inside-auto { page-break-inside: auto !important; }
  .page-break-inside-avoid { page-break-inside: avoid !important; }


  .print-hide { visibility: hidden !important; }
  .print-none,
  .noprint { display: none !important; }
  .print-only { display: initial !important; display: inherit !important; }

} /* eo @media print */
